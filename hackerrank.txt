You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.

For Example:

Www.HackerRank.com → wWW.hACKERrANK.COM
Pythonist 2 → pYTHONIST 2  

Function Description

Complete the swap_case function in the editor below.

swap_case has the following parameters:

    string s: the string to modify

Returns

    string: the modified string

Input Format

A single line containing a string

.

Constraints

Sample Input 0

HackerRank.com presents "Pythonist 2".

Sample Output 0

hACKERrANK.COM PRESENTS "pYTHONIST 2".

---
def swap_case(s):
    return ''.join(x.upper() if x.islower() else x.lower() for x in s)

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)

------------------------------------------------------------------------------

Task
Given an integer,

, perform the following conditional actions:

    If 

is odd, print Weird
If
is even and in the inclusive range of to
, print Not Weird
If
is even and in the inclusive range of to
, print Weird
If
is even and greater than

    , print Not Weird

Input Format

A single line containing a positive integer,

.

Constraints

Output Format

Print Weird if the number is weird. Otherwise, print Not Weird.

Sample Input 0

3

Sample Output 0

Weird

Explanation 0


is odd and odd numbers are weird, so print Weird.

Sample Input 1

24

Sample Output 1

Not Weird

Explanation 1


and is even, so it is not weird.

---

#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input().strip())
    if n%2 != 0 or (n in range(6,21) and n%2 == 0):
        print('Weird')
        
    elif (n in range(2,6) and n%2 == 0) or (n > 20 and n%2 == 0):
        print('Not Weird')

------------------------------------------------------------------------------

An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

In the Gregorian calendar, three conditions are used to identify leap years:

    The year can be evenly divided by 4, is a leap year, unless:
        The year can be evenly divided by 100, it is NOT a leap year, unless:
            The year is also evenly divisible by 400. Then it is a leap year.

This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years. Source

Task

Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.

Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.

Input Format

Read

, the year to test.

Constraints

Output Format

The function must return a Boolean value (True/False). Output is handled by the provided code stub.

Sample Input 0

1990

Sample Output 0

False

Explanation 0

1990 is not a multiple of 4 hence it's not a leap year. 

-----

def is_leap(year):
    leap = True if (year%4 == 0 and year%100 !=0) or (year%400 == 0) else False
    
    return leap

year = int(input())
print(is_leap(year))
------------------------------------------------------------------------------

The included code stub will read an integer,

, from STDIN.

Without using any string methods, try to print the following:

Note that "

" represents the consecutive values in between.

Example
Print the string

.

Input Format

The first line contains an integer

.

Constraints

Output Format

Print the list of integers from
through

as a string, without spaces.

Sample Input 0

3

Sample Output 0

123

---
if __name__ == '__main__':
    n = int(input())
    output = ''
    for i in range (1,n+1):
        output+=str(i)
        
    print(output)

------------------------------------------------------

et's learn about list comprehensions! You are given three integers and representing the dimensions of a cuboid along with an integer . Print a list of all possible coordinates given by on a 3D grid where the sum of is not equal to . Here,

. Please use list comprehensions rather than multiple loops, as a learning exercise.

Example



All permutations of are:

.

Print an array of the elements that do not sum to

.

Input Format

Four integers
and

, each on a separate line.

Constraints

Print the list in lexicographic increasing order.

Sample Input 0

1
1
1
2

Sample Output 0

[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]

Explanation 0

Each variable
and will have values of or . All permutations of lists in the form .
Remove all arrays that sum to

to leave only the valid permutations.

Sample Input 1

2
2
2
2

Sample Output 1

[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]

-------
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

    print([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n])

----------------------------------------------------


Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. You are given

scores. Store them in a list and find the score of the runner-up.

Input Format

The first line contains
. The second line contains an array of

integers each separated by a space.

Constraints

Output Format

Print the runner-up score.

Sample Input 0

5
2 3 6 6 5

Sample Output 0

5

Explanation 0

Given list is
. The maximum score is , second maximum is . Hence, we print as the runner-up score. 

------
if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    arr.sort(reverse=True)
    max = arr.pop(arr.index(max(arr)))
    for num in arr:
        if num < max:
            print(num)
            break
----------------------------------------------------------------------

You are given

words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word. See the sample input/output for clarification.

Note: Each input line ends with a "\n" character.

Constraints:

The sum of the lengths of all the words do not exceed


All the words are composed of lowercase English letters only.

Input Format

The first line contains the integer,
.
The next

lines each contain a word.

Output Format

Output

lines.
On the first line, output the number of distinct words from the input.
On the second line, output the number of occurrences for each distinct word according to their appearance in the input.

Sample Input

4
bcdef
abcdefg
bcde
bcdef

Sample Output

3
2 1 1

Explanation

There are
distinct words. Here, "bcdef" appears twice in the input at the first and last positions. The other words appear once each. The order of the first appearances are "bcdef", "abcdefg" and "bcde" which corresponds to the output.

---
from collections import Counter

a = Counter(input() for _ in range(int(input())))
print(len(a))
print(*a.values())
---------------------------------------------------------------------



There is an array of integers. There are also disjoint sets, and , each containing integers. You like all the integers in set and dislike all the integers in set . Your initial happiness is . For each integer in the array, if , you add to your happiness. If , you add

to your happiness. Otherwise, your happiness does not change. Output your final happiness at the end.

Note: Since
and

are sets, they have no repeated elements. However, the array might contain duplicate elements.

Constraints


Input Format

The first line contains integers
and separated by a space.
The second line contains integers, the elements of the array.
The third and fourth lines contain integers, and

, respectively.

Output Format

Output a single integer, your total happiness.

Sample Input

3 2
1 5 3
3 1
5 7

Sample Output

1

Explanation

You gain
unit of happiness for elements and in set . You lose unit for in set . The element in set

does not exist in the array so it is not included in the calculation.

Hence, the total happiness is
.

---------

m = input().split()
n = list(map(input().split()))
a = list(map(input().split()))
b = list(map(input().split()))

happiness = 0

for num in n:
    if num in a:
        happiness+=1 
    elif num in b:
        happiness-=1

print(happiness)

(NEED TO OPTIMISE FOR 1 TEST CASE)

--------------------------------------------------------------------------------------